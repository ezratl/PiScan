// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_request_2eproto();
namespace piscan_pb {
class DemodRequest;
class DemodRequestDefaultTypeInternal;
extern DemodRequestDefaultTypeInternal _DemodRequest_default_instance_;
class GeneralRequest;
class GeneralRequestDefaultTypeInternal;
extern GeneralRequestDefaultTypeInternal _GeneralRequest_default_instance_;
class LockoutRequest;
class LockoutRequestDefaultTypeInternal;
extern LockoutRequestDefaultTypeInternal _LockoutRequest_default_instance_;
class ScannerStateRequest;
class ScannerStateRequestDefaultTypeInternal;
extern ScannerStateRequestDefaultTypeInternal _ScannerStateRequest_default_instance_;
}  // namespace piscan_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::piscan_pb::DemodRequest* Arena::CreateMaybeMessage<::piscan_pb::DemodRequest>(Arena*);
template<> ::piscan_pb::GeneralRequest* Arena::CreateMaybeMessage<::piscan_pb::GeneralRequest>(Arena*);
template<> ::piscan_pb::LockoutRequest* Arena::CreateMaybeMessage<::piscan_pb::LockoutRequest>(Arena*);
template<> ::piscan_pb::ScannerStateRequest* Arena::CreateMaybeMessage<::piscan_pb::ScannerStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace piscan_pb {

enum GeneralRequest_RequestType {
  GeneralRequest_RequestType_SCANNER_CONTEXT = 0,
  GeneralRequest_RequestType_DEMOD_CONTEXT = 1,
  GeneralRequest_RequestType_SYSTEM_INFO = 2,
  GeneralRequest_RequestType_GeneralRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeneralRequest_RequestType_GeneralRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeneralRequest_RequestType_IsValid(int value);
constexpr GeneralRequest_RequestType GeneralRequest_RequestType_RequestType_MIN = GeneralRequest_RequestType_SCANNER_CONTEXT;
constexpr GeneralRequest_RequestType GeneralRequest_RequestType_RequestType_MAX = GeneralRequest_RequestType_SYSTEM_INFO;
constexpr int GeneralRequest_RequestType_RequestType_ARRAYSIZE = GeneralRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeneralRequest_RequestType_descriptor();
inline const std::string& GeneralRequest_RequestType_Name(GeneralRequest_RequestType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeneralRequest_RequestType_descriptor(), value);
}
inline bool GeneralRequest_RequestType_Parse(
    const std::string& name, GeneralRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeneralRequest_RequestType>(
    GeneralRequest_RequestType_descriptor(), name, value);
}
enum ScannerStateRequest_NewState {
  ScannerStateRequest_NewState_SCAN = 0,
  ScannerStateRequest_NewState_HOLD = 1,
  ScannerStateRequest_NewState_MANUAL = 2,
  ScannerStateRequest_NewState_ScannerStateRequest_NewState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScannerStateRequest_NewState_ScannerStateRequest_NewState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScannerStateRequest_NewState_IsValid(int value);
constexpr ScannerStateRequest_NewState ScannerStateRequest_NewState_NewState_MIN = ScannerStateRequest_NewState_SCAN;
constexpr ScannerStateRequest_NewState ScannerStateRequest_NewState_NewState_MAX = ScannerStateRequest_NewState_MANUAL;
constexpr int ScannerStateRequest_NewState_NewState_ARRAYSIZE = ScannerStateRequest_NewState_NewState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannerStateRequest_NewState_descriptor();
inline const std::string& ScannerStateRequest_NewState_Name(ScannerStateRequest_NewState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScannerStateRequest_NewState_descriptor(), value);
}
inline bool ScannerStateRequest_NewState_Parse(
    const std::string& name, ScannerStateRequest_NewState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScannerStateRequest_NewState>(
    ScannerStateRequest_NewState_descriptor(), name, value);
}
enum DemodRequest_DemodFunc {
  DemodRequest_DemodFunc_SET_SQUELCH = 0,
  DemodRequest_DemodFunc_SET_GAIN = 1,
  DemodRequest_DemodFunc_DemodRequest_DemodFunc_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DemodRequest_DemodFunc_DemodRequest_DemodFunc_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DemodRequest_DemodFunc_IsValid(int value);
constexpr DemodRequest_DemodFunc DemodRequest_DemodFunc_DemodFunc_MIN = DemodRequest_DemodFunc_SET_SQUELCH;
constexpr DemodRequest_DemodFunc DemodRequest_DemodFunc_DemodFunc_MAX = DemodRequest_DemodFunc_SET_GAIN;
constexpr int DemodRequest_DemodFunc_DemodFunc_ARRAYSIZE = DemodRequest_DemodFunc_DemodFunc_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DemodRequest_DemodFunc_descriptor();
inline const std::string& DemodRequest_DemodFunc_Name(DemodRequest_DemodFunc value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DemodRequest_DemodFunc_descriptor(), value);
}
inline bool DemodRequest_DemodFunc_Parse(
    const std::string& name, DemodRequest_DemodFunc* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DemodRequest_DemodFunc>(
    DemodRequest_DemodFunc_descriptor(), name, value);
}
enum LockoutRequest_Lockout {
  LockoutRequest_Lockout_NONE = 0,
  LockoutRequest_Lockout_TIMED = 1,
  LockoutRequest_Lockout_SESSION = 2,
  LockoutRequest_Lockout_PERSISTENT = 3,
  LockoutRequest_Lockout_LockoutRequest_Lockout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LockoutRequest_Lockout_LockoutRequest_Lockout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LockoutRequest_Lockout_IsValid(int value);
constexpr LockoutRequest_Lockout LockoutRequest_Lockout_Lockout_MIN = LockoutRequest_Lockout_NONE;
constexpr LockoutRequest_Lockout LockoutRequest_Lockout_Lockout_MAX = LockoutRequest_Lockout_PERSISTENT;
constexpr int LockoutRequest_Lockout_Lockout_ARRAYSIZE = LockoutRequest_Lockout_Lockout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockoutRequest_Lockout_descriptor();
inline const std::string& LockoutRequest_Lockout_Name(LockoutRequest_Lockout value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LockoutRequest_Lockout_descriptor(), value);
}
inline bool LockoutRequest_Lockout_Parse(
    const std::string& name, LockoutRequest_Lockout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LockoutRequest_Lockout>(
    LockoutRequest_Lockout_descriptor(), name, value);
}
// ===================================================================

class GeneralRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.GeneralRequest) */ {
 public:
  GeneralRequest();
  virtual ~GeneralRequest();

  GeneralRequest(const GeneralRequest& from);
  GeneralRequest(GeneralRequest&& from) noexcept
    : GeneralRequest() {
    *this = ::std::move(from);
  }

  inline GeneralRequest& operator=(const GeneralRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralRequest& operator=(GeneralRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeneralRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralRequest* internal_default_instance() {
    return reinterpret_cast<const GeneralRequest*>(
               &_GeneralRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeneralRequest* other);
  friend void swap(GeneralRequest& a, GeneralRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralRequest* New() const final {
    return CreateMaybeMessage<GeneralRequest>(nullptr);
  }

  GeneralRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralRequest& from);
  void MergeFrom(const GeneralRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.GeneralRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeneralRequest_RequestType RequestType;
  static constexpr RequestType SCANNER_CONTEXT =
    GeneralRequest_RequestType_SCANNER_CONTEXT;
  static constexpr RequestType DEMOD_CONTEXT =
    GeneralRequest_RequestType_DEMOD_CONTEXT;
  static constexpr RequestType SYSTEM_INFO =
    GeneralRequest_RequestType_SYSTEM_INFO;
  static inline bool RequestType_IsValid(int value) {
    return GeneralRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    GeneralRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    GeneralRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    GeneralRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return GeneralRequest_RequestType_descriptor();
  }
  static inline const std::string& RequestType_Name(RequestType value) {
    return GeneralRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return GeneralRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .piscan_pb.GeneralRequest.RequestType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::piscan_pb::GeneralRequest_RequestType type() const;
  void set_type(::piscan_pb::GeneralRequest_RequestType value);

  // @@protoc_insertion_point(class_scope:piscan_pb.GeneralRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class ScannerStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.ScannerStateRequest) */ {
 public:
  ScannerStateRequest();
  virtual ~ScannerStateRequest();

  ScannerStateRequest(const ScannerStateRequest& from);
  ScannerStateRequest(ScannerStateRequest&& from) noexcept
    : ScannerStateRequest() {
    *this = ::std::move(from);
  }

  inline ScannerStateRequest& operator=(const ScannerStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScannerStateRequest& operator=(ScannerStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScannerStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScannerStateRequest* internal_default_instance() {
    return reinterpret_cast<const ScannerStateRequest*>(
               &_ScannerStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScannerStateRequest* other);
  friend void swap(ScannerStateRequest& a, ScannerStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScannerStateRequest* New() const final {
    return CreateMaybeMessage<ScannerStateRequest>(nullptr);
  }

  ScannerStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScannerStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScannerStateRequest& from);
  void MergeFrom(const ScannerStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScannerStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.ScannerStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScannerStateRequest_NewState NewState;
  static constexpr NewState SCAN =
    ScannerStateRequest_NewState_SCAN;
  static constexpr NewState HOLD =
    ScannerStateRequest_NewState_HOLD;
  static constexpr NewState MANUAL =
    ScannerStateRequest_NewState_MANUAL;
  static inline bool NewState_IsValid(int value) {
    return ScannerStateRequest_NewState_IsValid(value);
  }
  static constexpr NewState NewState_MIN =
    ScannerStateRequest_NewState_NewState_MIN;
  static constexpr NewState NewState_MAX =
    ScannerStateRequest_NewState_NewState_MAX;
  static constexpr int NewState_ARRAYSIZE =
    ScannerStateRequest_NewState_NewState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NewState_descriptor() {
    return ScannerStateRequest_NewState_descriptor();
  }
  static inline const std::string& NewState_Name(NewState value) {
    return ScannerStateRequest_NewState_Name(value);
  }
  static inline bool NewState_Parse(const std::string& name,
      NewState* value) {
    return ScannerStateRequest_NewState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string manModulation = 4;
  void clear_manmodulation();
  static const int kManModulationFieldNumber = 4;
  const std::string& manmodulation() const;
  void set_manmodulation(const std::string& value);
  void set_manmodulation(std::string&& value);
  void set_manmodulation(const char* value);
  void set_manmodulation(const char* value, size_t size);
  std::string* mutable_manmodulation();
  std::string* release_manmodulation();
  void set_allocated_manmodulation(std::string* manmodulation);

  // string holdIndex = 5;
  void clear_holdindex();
  static const int kHoldIndexFieldNumber = 5;
  const std::string& holdindex() const;
  void set_holdindex(const std::string& value);
  void set_holdindex(std::string&& value);
  void set_holdindex(const char* value);
  void set_holdindex(const char* value, size_t size);
  std::string* mutable_holdindex();
  std::string* release_holdindex();
  void set_allocated_holdindex(std::string* holdindex);

  // int32 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .piscan_pb.ScannerStateRequest.NewState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::piscan_pb::ScannerStateRequest_NewState state() const;
  void set_state(::piscan_pb::ScannerStateRequest_NewState value);

  // int64 manFreq = 3;
  void clear_manfreq();
  static const int kManFreqFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 manfreq() const;
  void set_manfreq(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:piscan_pb.ScannerStateRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manmodulation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr holdindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int64 manfreq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class DemodRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.DemodRequest) */ {
 public:
  DemodRequest();
  virtual ~DemodRequest();

  DemodRequest(const DemodRequest& from);
  DemodRequest(DemodRequest&& from) noexcept
    : DemodRequest() {
    *this = ::std::move(from);
  }

  inline DemodRequest& operator=(const DemodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemodRequest& operator=(DemodRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DemodRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemodRequest* internal_default_instance() {
    return reinterpret_cast<const DemodRequest*>(
               &_DemodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DemodRequest* other);
  friend void swap(DemodRequest& a, DemodRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DemodRequest* New() const final {
    return CreateMaybeMessage<DemodRequest>(nullptr);
  }

  DemodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemodRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemodRequest& from);
  void MergeFrom(const DemodRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemodRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.DemodRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DemodRequest_DemodFunc DemodFunc;
  static constexpr DemodFunc SET_SQUELCH =
    DemodRequest_DemodFunc_SET_SQUELCH;
  static constexpr DemodFunc SET_GAIN =
    DemodRequest_DemodFunc_SET_GAIN;
  static inline bool DemodFunc_IsValid(int value) {
    return DemodRequest_DemodFunc_IsValid(value);
  }
  static constexpr DemodFunc DemodFunc_MIN =
    DemodRequest_DemodFunc_DemodFunc_MIN;
  static constexpr DemodFunc DemodFunc_MAX =
    DemodRequest_DemodFunc_DemodFunc_MAX;
  static constexpr int DemodFunc_ARRAYSIZE =
    DemodRequest_DemodFunc_DemodFunc_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DemodFunc_descriptor() {
    return DemodRequest_DemodFunc_descriptor();
  }
  static inline const std::string& DemodFunc_Name(DemodFunc value) {
    return DemodRequest_DemodFunc_Name(value);
  }
  static inline bool DemodFunc_Parse(const std::string& name,
      DemodFunc* value) {
    return DemodRequest_DemodFunc_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .piscan_pb.DemodRequest.DemodFunc type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::piscan_pb::DemodRequest_DemodFunc type() const;
  void set_type(::piscan_pb::DemodRequest_DemodFunc value);

  // float level = 3;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  float level() const;
  void set_level(float value);

  // @@protoc_insertion_point(class_scope:piscan_pb.DemodRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 handle_;
  int type_;
  float level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class LockoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.LockoutRequest) */ {
 public:
  LockoutRequest();
  virtual ~LockoutRequest();

  LockoutRequest(const LockoutRequest& from);
  LockoutRequest(LockoutRequest&& from) noexcept
    : LockoutRequest() {
    *this = ::std::move(from);
  }

  inline LockoutRequest& operator=(const LockoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockoutRequest& operator=(LockoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LockoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockoutRequest* internal_default_instance() {
    return reinterpret_cast<const LockoutRequest*>(
               &_LockoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LockoutRequest* other);
  friend void swap(LockoutRequest& a, LockoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockoutRequest* New() const final {
    return CreateMaybeMessage<LockoutRequest>(nullptr);
  }

  LockoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockoutRequest& from);
  void MergeFrom(const LockoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.LockoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LockoutRequest_Lockout Lockout;
  static constexpr Lockout NONE =
    LockoutRequest_Lockout_NONE;
  static constexpr Lockout TIMED =
    LockoutRequest_Lockout_TIMED;
  static constexpr Lockout SESSION =
    LockoutRequest_Lockout_SESSION;
  static constexpr Lockout PERSISTENT =
    LockoutRequest_Lockout_PERSISTENT;
  static inline bool Lockout_IsValid(int value) {
    return LockoutRequest_Lockout_IsValid(value);
  }
  static constexpr Lockout Lockout_MIN =
    LockoutRequest_Lockout_Lockout_MIN;
  static constexpr Lockout Lockout_MAX =
    LockoutRequest_Lockout_Lockout_MAX;
  static constexpr int Lockout_ARRAYSIZE =
    LockoutRequest_Lockout_Lockout_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lockout_descriptor() {
    return LockoutRequest_Lockout_descriptor();
  }
  static inline const std::string& Lockout_Name(Lockout value) {
    return LockoutRequest_Lockout_Name(value);
  }
  static inline bool Lockout_Parse(const std::string& name,
      Lockout* value) {
    return LockoutRequest_Lockout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string entryIndex = 1;
  void clear_entryindex();
  static const int kEntryIndexFieldNumber = 1;
  const std::string& entryindex() const;
  void set_entryindex(const std::string& value);
  void set_entryindex(std::string&& value);
  void set_entryindex(const char* value);
  void set_entryindex(const char* value, size_t size);
  std::string* mutable_entryindex();
  std::string* release_entryindex();
  void set_allocated_entryindex(std::string* entryindex);

  // .piscan_pb.LockoutRequest.Lockout lockoutType = 2;
  void clear_lockouttype();
  static const int kLockoutTypeFieldNumber = 2;
  ::piscan_pb::LockoutRequest_Lockout lockouttype() const;
  void set_lockouttype(::piscan_pb::LockoutRequest_Lockout value);

  // int32 lockoutDuration = 3;
  void clear_lockoutduration();
  static const int kLockoutDurationFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 lockoutduration() const;
  void set_lockoutduration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:piscan_pb.LockoutRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entryindex_;
  int lockouttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockoutduration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralRequest

// int32 handle = 1;
inline void GeneralRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeneralRequest::handle() const {
  // @@protoc_insertion_point(field_get:piscan_pb.GeneralRequest.handle)
  return handle_;
}
inline void GeneralRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.GeneralRequest.handle)
}

// .piscan_pb.GeneralRequest.RequestType type = 2;
inline void GeneralRequest::clear_type() {
  type_ = 0;
}
inline ::piscan_pb::GeneralRequest_RequestType GeneralRequest::type() const {
  // @@protoc_insertion_point(field_get:piscan_pb.GeneralRequest.type)
  return static_cast< ::piscan_pb::GeneralRequest_RequestType >(type_);
}
inline void GeneralRequest::set_type(::piscan_pb::GeneralRequest_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.GeneralRequest.type)
}

// -------------------------------------------------------------------

// ScannerStateRequest

// int32 handle = 1;
inline void ScannerStateRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScannerStateRequest::handle() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerStateRequest.handle)
  return handle_;
}
inline void ScannerStateRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerStateRequest.handle)
}

// .piscan_pb.ScannerStateRequest.NewState state = 2;
inline void ScannerStateRequest::clear_state() {
  state_ = 0;
}
inline ::piscan_pb::ScannerStateRequest_NewState ScannerStateRequest::state() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerStateRequest.state)
  return static_cast< ::piscan_pb::ScannerStateRequest_NewState >(state_);
}
inline void ScannerStateRequest::set_state(::piscan_pb::ScannerStateRequest_NewState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerStateRequest.state)
}

// int64 manFreq = 3;
inline void ScannerStateRequest::clear_manfreq() {
  manfreq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScannerStateRequest::manfreq() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerStateRequest.manFreq)
  return manfreq_;
}
inline void ScannerStateRequest::set_manfreq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  manfreq_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerStateRequest.manFreq)
}

// string manModulation = 4;
inline void ScannerStateRequest::clear_manmodulation() {
  manmodulation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScannerStateRequest::manmodulation() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerStateRequest.manModulation)
  return manmodulation_.GetNoArena();
}
inline void ScannerStateRequest::set_manmodulation(const std::string& value) {
  
  manmodulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerStateRequest.manModulation)
}
inline void ScannerStateRequest::set_manmodulation(std::string&& value) {
  
  manmodulation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.ScannerStateRequest.manModulation)
}
inline void ScannerStateRequest::set_manmodulation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manmodulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.ScannerStateRequest.manModulation)
}
inline void ScannerStateRequest::set_manmodulation(const char* value, size_t size) {
  
  manmodulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.ScannerStateRequest.manModulation)
}
inline std::string* ScannerStateRequest::mutable_manmodulation() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.ScannerStateRequest.manModulation)
  return manmodulation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScannerStateRequest::release_manmodulation() {
  // @@protoc_insertion_point(field_release:piscan_pb.ScannerStateRequest.manModulation)
  
  return manmodulation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScannerStateRequest::set_allocated_manmodulation(std::string* manmodulation) {
  if (manmodulation != nullptr) {
    
  } else {
    
  }
  manmodulation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manmodulation);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.ScannerStateRequest.manModulation)
}

// string holdIndex = 5;
inline void ScannerStateRequest::clear_holdindex() {
  holdindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ScannerStateRequest::holdindex() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerStateRequest.holdIndex)
  return holdindex_.GetNoArena();
}
inline void ScannerStateRequest::set_holdindex(const std::string& value) {
  
  holdindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerStateRequest.holdIndex)
}
inline void ScannerStateRequest::set_holdindex(std::string&& value) {
  
  holdindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.ScannerStateRequest.holdIndex)
}
inline void ScannerStateRequest::set_holdindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  holdindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.ScannerStateRequest.holdIndex)
}
inline void ScannerStateRequest::set_holdindex(const char* value, size_t size) {
  
  holdindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.ScannerStateRequest.holdIndex)
}
inline std::string* ScannerStateRequest::mutable_holdindex() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.ScannerStateRequest.holdIndex)
  return holdindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScannerStateRequest::release_holdindex() {
  // @@protoc_insertion_point(field_release:piscan_pb.ScannerStateRequest.holdIndex)
  
  return holdindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScannerStateRequest::set_allocated_holdindex(std::string* holdindex) {
  if (holdindex != nullptr) {
    
  } else {
    
  }
  holdindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), holdindex);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.ScannerStateRequest.holdIndex)
}

// -------------------------------------------------------------------

// DemodRequest

// int32 handle = 1;
inline void DemodRequest::clear_handle() {
  handle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodRequest::handle() const {
  // @@protoc_insertion_point(field_get:piscan_pb.DemodRequest.handle)
  return handle_;
}
inline void DemodRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.DemodRequest.handle)
}

// .piscan_pb.DemodRequest.DemodFunc type = 2;
inline void DemodRequest::clear_type() {
  type_ = 0;
}
inline ::piscan_pb::DemodRequest_DemodFunc DemodRequest::type() const {
  // @@protoc_insertion_point(field_get:piscan_pb.DemodRequest.type)
  return static_cast< ::piscan_pb::DemodRequest_DemodFunc >(type_);
}
inline void DemodRequest::set_type(::piscan_pb::DemodRequest_DemodFunc value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.DemodRequest.type)
}

// float level = 3;
inline void DemodRequest::clear_level() {
  level_ = 0;
}
inline float DemodRequest::level() const {
  // @@protoc_insertion_point(field_get:piscan_pb.DemodRequest.level)
  return level_;
}
inline void DemodRequest::set_level(float value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.DemodRequest.level)
}

// -------------------------------------------------------------------

// LockoutRequest

// string entryIndex = 1;
inline void LockoutRequest::clear_entryindex() {
  entryindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LockoutRequest::entryindex() const {
  // @@protoc_insertion_point(field_get:piscan_pb.LockoutRequest.entryIndex)
  return entryindex_.GetNoArena();
}
inline void LockoutRequest::set_entryindex(const std::string& value) {
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.LockoutRequest.entryIndex)
}
inline void LockoutRequest::set_entryindex(std::string&& value) {
  
  entryindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.LockoutRequest.entryIndex)
}
inline void LockoutRequest::set_entryindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.LockoutRequest.entryIndex)
}
inline void LockoutRequest::set_entryindex(const char* value, size_t size) {
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.LockoutRequest.entryIndex)
}
inline std::string* LockoutRequest::mutable_entryindex() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.LockoutRequest.entryIndex)
  return entryindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LockoutRequest::release_entryindex() {
  // @@protoc_insertion_point(field_release:piscan_pb.LockoutRequest.entryIndex)
  
  return entryindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LockoutRequest::set_allocated_entryindex(std::string* entryindex) {
  if (entryindex != nullptr) {
    
  } else {
    
  }
  entryindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entryindex);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.LockoutRequest.entryIndex)
}

// .piscan_pb.LockoutRequest.Lockout lockoutType = 2;
inline void LockoutRequest::clear_lockouttype() {
  lockouttype_ = 0;
}
inline ::piscan_pb::LockoutRequest_Lockout LockoutRequest::lockouttype() const {
  // @@protoc_insertion_point(field_get:piscan_pb.LockoutRequest.lockoutType)
  return static_cast< ::piscan_pb::LockoutRequest_Lockout >(lockouttype_);
}
inline void LockoutRequest::set_lockouttype(::piscan_pb::LockoutRequest_Lockout value) {
  
  lockouttype_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.LockoutRequest.lockoutType)
}

// int32 lockoutDuration = 3;
inline void LockoutRequest::clear_lockoutduration() {
  lockoutduration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockoutRequest::lockoutduration() const {
  // @@protoc_insertion_point(field_get:piscan_pb.LockoutRequest.lockoutDuration)
  return lockoutduration_;
}
inline void LockoutRequest::set_lockoutduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lockoutduration_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.LockoutRequest.lockoutDuration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace piscan_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::piscan_pb::GeneralRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::GeneralRequest_RequestType>() {
  return ::piscan_pb::GeneralRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::piscan_pb::ScannerStateRequest_NewState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::ScannerStateRequest_NewState>() {
  return ::piscan_pb::ScannerStateRequest_NewState_descriptor();
}
template <> struct is_proto_enum< ::piscan_pb::DemodRequest_DemodFunc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::DemodRequest_DemodFunc>() {
  return ::piscan_pb::DemodRequest_DemodFunc_descriptor();
}
template <> struct is_proto_enum< ::piscan_pb::LockoutRequest_Lockout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::LockoutRequest_Lockout>() {
  return ::piscan_pb::LockoutRequest_Lockout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_context_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_context_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_context_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_context_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_context_2eproto();
namespace piscan_pb {
class DemodContext;
class DemodContextDefaultTypeInternal;
extern DemodContextDefaultTypeInternal _DemodContext_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class GeneralMessage;
class GeneralMessageDefaultTypeInternal;
extern GeneralMessageDefaultTypeInternal _GeneralMessage_default_instance_;
class ScannerContext;
class ScannerContextDefaultTypeInternal;
extern ScannerContextDefaultTypeInternal _ScannerContext_default_instance_;
class SignalLevel;
class SignalLevelDefaultTypeInternal;
extern SignalLevelDefaultTypeInternal _SignalLevel_default_instance_;
class SystemInfo;
class SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
}  // namespace piscan_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::piscan_pb::DemodContext* Arena::CreateMaybeMessage<::piscan_pb::DemodContext>(Arena*);
template<> ::piscan_pb::Entry* Arena::CreateMaybeMessage<::piscan_pb::Entry>(Arena*);
template<> ::piscan_pb::GeneralMessage* Arena::CreateMaybeMessage<::piscan_pb::GeneralMessage>(Arena*);
template<> ::piscan_pb::ScannerContext* Arena::CreateMaybeMessage<::piscan_pb::ScannerContext>(Arena*);
template<> ::piscan_pb::SignalLevel* Arena::CreateMaybeMessage<::piscan_pb::SignalLevel>(Arena*);
template<> ::piscan_pb::SystemInfo* Arena::CreateMaybeMessage<::piscan_pb::SystemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace piscan_pb {

enum Entry_Lockout {
  Entry_Lockout_NONE = 0,
  Entry_Lockout_TIMED = 1,
  Entry_Lockout_SESSION = 2,
  Entry_Lockout_PERSISTENT = 3,
  Entry_Lockout_Entry_Lockout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Entry_Lockout_Entry_Lockout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Entry_Lockout_IsValid(int value);
constexpr Entry_Lockout Entry_Lockout_Lockout_MIN = Entry_Lockout_NONE;
constexpr Entry_Lockout Entry_Lockout_Lockout_MAX = Entry_Lockout_PERSISTENT;
constexpr int Entry_Lockout_Lockout_ARRAYSIZE = Entry_Lockout_Lockout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Entry_Lockout_descriptor();
inline const std::string& Entry_Lockout_Name(Entry_Lockout value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Entry_Lockout_descriptor(), value);
}
inline bool Entry_Lockout_Parse(
    const std::string& name, Entry_Lockout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Entry_Lockout>(
    Entry_Lockout_descriptor(), name, value);
}
enum ScannerContext_State {
  ScannerContext_State_INVAL = 0,
  ScannerContext_State_SCAN = 1,
  ScannerContext_State_HOLD = 2,
  ScannerContext_State_RECEIVE = 3,
  ScannerContext_State_ScannerContext_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScannerContext_State_ScannerContext_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScannerContext_State_IsValid(int value);
constexpr ScannerContext_State ScannerContext_State_State_MIN = ScannerContext_State_INVAL;
constexpr ScannerContext_State ScannerContext_State_State_MAX = ScannerContext_State_RECEIVE;
constexpr int ScannerContext_State_State_ARRAYSIZE = ScannerContext_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannerContext_State_descriptor();
inline const std::string& ScannerContext_State_Name(ScannerContext_State value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScannerContext_State_descriptor(), value);
}
inline bool ScannerContext_State_Parse(
    const std::string& name, ScannerContext_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScannerContext_State>(
    ScannerContext_State_descriptor(), name, value);
}
enum GeneralMessage_Type {
  GeneralMessage_Type_INFO = 0,
  GeneralMessage_Type_WARNING = 1,
  GeneralMessage_Type_ERROR = 2,
  GeneralMessage_Type_CONSOLE = 3,
  GeneralMessage_Type_GeneralMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeneralMessage_Type_GeneralMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeneralMessage_Type_IsValid(int value);
constexpr GeneralMessage_Type GeneralMessage_Type_Type_MIN = GeneralMessage_Type_INFO;
constexpr GeneralMessage_Type GeneralMessage_Type_Type_MAX = GeneralMessage_Type_CONSOLE;
constexpr int GeneralMessage_Type_Type_ARRAYSIZE = GeneralMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeneralMessage_Type_descriptor();
inline const std::string& GeneralMessage_Type_Name(GeneralMessage_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeneralMessage_Type_descriptor(), value);
}
inline bool GeneralMessage_Type_Parse(
    const std::string& name, GeneralMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeneralMessage_Type>(
    GeneralMessage_Type_descriptor(), name, value);
}
// ===================================================================

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Entry_Lockout Lockout;
  static constexpr Lockout NONE =
    Entry_Lockout_NONE;
  static constexpr Lockout TIMED =
    Entry_Lockout_TIMED;
  static constexpr Lockout SESSION =
    Entry_Lockout_SESSION;
  static constexpr Lockout PERSISTENT =
    Entry_Lockout_PERSISTENT;
  static inline bool Lockout_IsValid(int value) {
    return Entry_Lockout_IsValid(value);
  }
  static constexpr Lockout Lockout_MIN =
    Entry_Lockout_Lockout_MIN;
  static constexpr Lockout Lockout_MAX =
    Entry_Lockout_Lockout_MAX;
  static constexpr int Lockout_ARRAYSIZE =
    Entry_Lockout_Lockout_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Lockout_descriptor() {
    return Entry_Lockout_descriptor();
  }
  static inline const std::string& Lockout_Name(Lockout value) {
    return Entry_Lockout_Name(value);
  }
  static inline bool Lockout_Parse(const std::string& name,
      Lockout* value) {
    return Entry_Lockout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string systemTag = 2;
  void clear_systemtag();
  static const int kSystemTagFieldNumber = 2;
  const std::string& systemtag() const;
  void set_systemtag(const std::string& value);
  void set_systemtag(std::string&& value);
  void set_systemtag(const char* value);
  void set_systemtag(const char* value, size_t size);
  std::string* mutable_systemtag();
  std::string* release_systemtag();
  void set_allocated_systemtag(std::string* systemtag);

  // string entryTag = 3;
  void clear_entrytag();
  static const int kEntryTagFieldNumber = 3;
  const std::string& entrytag() const;
  void set_entrytag(const std::string& value);
  void set_entrytag(std::string&& value);
  void set_entrytag(const char* value);
  void set_entrytag(const char* value, size_t size);
  std::string* mutable_entrytag();
  std::string* release_entrytag();
  void set_allocated_entrytag(std::string* entrytag);

  // string modulation = 4;
  void clear_modulation();
  static const int kModulationFieldNumber = 4;
  const std::string& modulation() const;
  void set_modulation(const std::string& value);
  void set_modulation(std::string&& value);
  void set_modulation(const char* value);
  void set_modulation(const char* value, size_t size);
  std::string* mutable_modulation();
  std::string* release_modulation();
  void set_allocated_modulation(std::string* modulation);

  // string entryIndex = 5;
  void clear_entryindex();
  static const int kEntryIndexFieldNumber = 5;
  const std::string& entryindex() const;
  void set_entryindex(const std::string& value);
  void set_entryindex(std::string&& value);
  void set_entryindex(const char* value);
  void set_entryindex(const char* value, size_t size);
  std::string* mutable_entryindex();
  std::string* release_entryindex();
  void set_allocated_entryindex(std::string* entryindex);

  // uint64 freq = 1;
  void clear_freq();
  static const int kFreqFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 freq() const;
  void set_freq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .piscan_pb.Entry.Lockout lockoutType = 6;
  void clear_lockouttype();
  static const int kLockoutTypeFieldNumber = 6;
  ::piscan_pb::Entry_Lockout lockouttype() const;
  void set_lockouttype(::piscan_pb::Entry_Lockout value);

  // int32 lockoutDuration = 7;
  void clear_lockoutduration();
  static const int kLockoutDurationFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 lockoutduration() const;
  void set_lockoutduration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delay = 8;
  void clear_delay();
  static const int kDelayFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:piscan_pb.Entry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr systemtag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entrytag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entryindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 freq_;
  int lockouttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockoutduration_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// -------------------------------------------------------------------

class SignalLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.SignalLevel) */ {
 public:
  SignalLevel();
  virtual ~SignalLevel();

  SignalLevel(const SignalLevel& from);
  SignalLevel(SignalLevel&& from) noexcept
    : SignalLevel() {
    *this = ::std::move(from);
  }

  inline SignalLevel& operator=(const SignalLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalLevel& operator=(SignalLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalLevel* internal_default_instance() {
    return reinterpret_cast<const SignalLevel*>(
               &_SignalLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SignalLevel* other);
  friend void swap(SignalLevel& a, SignalLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalLevel* New() const final {
    return CreateMaybeMessage<SignalLevel>(nullptr);
  }

  SignalLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalLevel& from);
  void MergeFrom(const SignalLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.SignalLevel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:piscan_pb.SignalLevel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// -------------------------------------------------------------------

class ScannerContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.ScannerContext) */ {
 public:
  ScannerContext();
  virtual ~ScannerContext();

  ScannerContext(const ScannerContext& from);
  ScannerContext(ScannerContext&& from) noexcept
    : ScannerContext() {
    *this = ::std::move(from);
  }

  inline ScannerContext& operator=(const ScannerContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScannerContext& operator=(ScannerContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ScannerContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScannerContext* internal_default_instance() {
    return reinterpret_cast<const ScannerContext*>(
               &_ScannerContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ScannerContext* other);
  friend void swap(ScannerContext& a, ScannerContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScannerContext* New() const final {
    return CreateMaybeMessage<ScannerContext>(nullptr);
  }

  ScannerContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScannerContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScannerContext& from);
  void MergeFrom(const ScannerContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScannerContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.ScannerContext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScannerContext_State State;
  static constexpr State INVAL =
    ScannerContext_State_INVAL;
  static constexpr State SCAN =
    ScannerContext_State_SCAN;
  static constexpr State HOLD =
    ScannerContext_State_HOLD;
  static constexpr State RECEIVE =
    ScannerContext_State_RECEIVE;
  static inline bool State_IsValid(int value) {
    return ScannerContext_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ScannerContext_State_State_MIN;
  static constexpr State State_MAX =
    ScannerContext_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ScannerContext_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ScannerContext_State_descriptor();
  }
  static inline const std::string& State_Name(State value) {
    return ScannerContext_State_Name(value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return ScannerContext_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .piscan_pb.Entry entryData = 2;
  bool has_entrydata() const;
  void clear_entrydata();
  static const int kEntryDataFieldNumber = 2;
  const ::piscan_pb::Entry& entrydata() const;
  ::piscan_pb::Entry* release_entrydata();
  ::piscan_pb::Entry* mutable_entrydata();
  void set_allocated_entrydata(::piscan_pb::Entry* entrydata);

  // .piscan_pb.ScannerContext.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::piscan_pb::ScannerContext_State state() const;
  void set_state(::piscan_pb::ScannerContext_State value);

  // bool manualHold = 3;
  void clear_manualhold();
  static const int kManualHoldFieldNumber = 3;
  bool manualhold() const;
  void set_manualhold(bool value);

  // @@protoc_insertion_point(class_scope:piscan_pb.ScannerContext)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::piscan_pb::Entry* entrydata_;
  int state_;
  bool manualhold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// -------------------------------------------------------------------

class DemodContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.DemodContext) */ {
 public:
  DemodContext();
  virtual ~DemodContext();

  DemodContext(const DemodContext& from);
  DemodContext(DemodContext&& from) noexcept
    : DemodContext() {
    *this = ::std::move(from);
  }

  inline DemodContext& operator=(const DemodContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemodContext& operator=(DemodContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DemodContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemodContext* internal_default_instance() {
    return reinterpret_cast<const DemodContext*>(
               &_DemodContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DemodContext* other);
  friend void swap(DemodContext& a, DemodContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DemodContext* New() const final {
    return CreateMaybeMessage<DemodContext>(nullptr);
  }

  DemodContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemodContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemodContext& from);
  void MergeFrom(const DemodContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemodContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.DemodContext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 squelch = 1;
  void clear_squelch();
  static const int kSquelchFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 squelch() const;
  void set_squelch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float gain = 2;
  void clear_gain();
  static const int kGainFieldNumber = 2;
  float gain() const;
  void set_gain(float value);

  // @@protoc_insertion_point(class_scope:piscan_pb.DemodContext)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 squelch_;
  float gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// -------------------------------------------------------------------

class GeneralMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.GeneralMessage) */ {
 public:
  GeneralMessage();
  virtual ~GeneralMessage();

  GeneralMessage(const GeneralMessage& from);
  GeneralMessage(GeneralMessage&& from) noexcept
    : GeneralMessage() {
    *this = ::std::move(from);
  }

  inline GeneralMessage& operator=(const GeneralMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralMessage& operator=(GeneralMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GeneralMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralMessage* internal_default_instance() {
    return reinterpret_cast<const GeneralMessage*>(
               &_GeneralMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GeneralMessage* other);
  friend void swap(GeneralMessage& a, GeneralMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralMessage* New() const final {
    return CreateMaybeMessage<GeneralMessage>(nullptr);
  }

  GeneralMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneralMessage& from);
  void MergeFrom(const GeneralMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.GeneralMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GeneralMessage_Type Type;
  static constexpr Type INFO =
    GeneralMessage_Type_INFO;
  static constexpr Type WARNING =
    GeneralMessage_Type_WARNING;
  static constexpr Type ERROR =
    GeneralMessage_Type_ERROR;
  static constexpr Type CONSOLE =
    GeneralMessage_Type_CONSOLE;
  static inline bool Type_IsValid(int value) {
    return GeneralMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GeneralMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GeneralMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GeneralMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GeneralMessage_Type_descriptor();
  }
  static inline const std::string& Type_Name(Type value) {
    return GeneralMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GeneralMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // .piscan_pb.GeneralMessage.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::piscan_pb::GeneralMessage_Type type() const;
  void set_type(::piscan_pb::GeneralMessage_Type value);

  // @@protoc_insertion_point(class_scope:piscan_pb.GeneralMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// -------------------------------------------------------------------

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:piscan_pb.SystemInfo) */ {
 public:
  SystemInfo();
  virtual ~SystemInfo();

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SystemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SystemInfo* other);
  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return CreateMaybeMessage<SystemInfo>(nullptr);
  }

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemInfo& from);
  void MergeFrom(const SystemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "piscan_pb.SystemInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string supportedModulations = 5;
  int supportedmodulations_size() const;
  void clear_supportedmodulations();
  static const int kSupportedModulationsFieldNumber = 5;
  const std::string& supportedmodulations(int index) const;
  std::string* mutable_supportedmodulations(int index);
  void set_supportedmodulations(int index, const std::string& value);
  void set_supportedmodulations(int index, std::string&& value);
  void set_supportedmodulations(int index, const char* value);
  void set_supportedmodulations(int index, const char* value, size_t size);
  std::string* add_supportedmodulations();
  void add_supportedmodulations(const std::string& value);
  void add_supportedmodulations(std::string&& value);
  void add_supportedmodulations(const char* value);
  void add_supportedmodulations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supportedmodulations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supportedmodulations();

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // int32 build = 2;
  void clear_build();
  static const int kBuildFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 build() const;
  void set_build(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 squelchScaleMin = 3;
  void clear_squelchscalemin();
  static const int kSquelchScaleMinFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 squelchscalemin() const;
  void set_squelchscalemin(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 squelchScaleMax = 4;
  void clear_squelchscalemax();
  static const int kSquelchScaleMaxFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 squelchscalemax() const;
  void set_squelchscalemax(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:piscan_pb.SystemInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supportedmodulations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 build_;
  ::PROTOBUF_NAMESPACE_ID::int32 squelchscalemin_;
  ::PROTOBUF_NAMESPACE_ID::int32 squelchscalemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_context_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// uint64 freq = 1;
inline void Entry::clear_freq() {
  freq_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::freq() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.freq)
  return freq_;
}
inline void Entry::set_freq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.freq)
}

// string systemTag = 2;
inline void Entry::clear_systemtag() {
  systemtag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::systemtag() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.systemTag)
  return systemtag_.GetNoArena();
}
inline void Entry::set_systemtag(const std::string& value) {
  
  systemtag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.systemTag)
}
inline void Entry::set_systemtag(std::string&& value) {
  
  systemtag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.Entry.systemTag)
}
inline void Entry::set_systemtag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  systemtag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.Entry.systemTag)
}
inline void Entry::set_systemtag(const char* value, size_t size) {
  
  systemtag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.Entry.systemTag)
}
inline std::string* Entry::mutable_systemtag() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.Entry.systemTag)
  return systemtag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_systemtag() {
  // @@protoc_insertion_point(field_release:piscan_pb.Entry.systemTag)
  
  return systemtag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_systemtag(std::string* systemtag) {
  if (systemtag != nullptr) {
    
  } else {
    
  }
  systemtag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), systemtag);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.Entry.systemTag)
}

// string entryTag = 3;
inline void Entry::clear_entrytag() {
  entrytag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::entrytag() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.entryTag)
  return entrytag_.GetNoArena();
}
inline void Entry::set_entrytag(const std::string& value) {
  
  entrytag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.entryTag)
}
inline void Entry::set_entrytag(std::string&& value) {
  
  entrytag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.Entry.entryTag)
}
inline void Entry::set_entrytag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entrytag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.Entry.entryTag)
}
inline void Entry::set_entrytag(const char* value, size_t size) {
  
  entrytag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.Entry.entryTag)
}
inline std::string* Entry::mutable_entrytag() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.Entry.entryTag)
  return entrytag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_entrytag() {
  // @@protoc_insertion_point(field_release:piscan_pb.Entry.entryTag)
  
  return entrytag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_entrytag(std::string* entrytag) {
  if (entrytag != nullptr) {
    
  } else {
    
  }
  entrytag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entrytag);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.Entry.entryTag)
}

// string modulation = 4;
inline void Entry::clear_modulation() {
  modulation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::modulation() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.modulation)
  return modulation_.GetNoArena();
}
inline void Entry::set_modulation(const std::string& value) {
  
  modulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.modulation)
}
inline void Entry::set_modulation(std::string&& value) {
  
  modulation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.Entry.modulation)
}
inline void Entry::set_modulation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.Entry.modulation)
}
inline void Entry::set_modulation(const char* value, size_t size) {
  
  modulation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.Entry.modulation)
}
inline std::string* Entry::mutable_modulation() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.Entry.modulation)
  return modulation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_modulation() {
  // @@protoc_insertion_point(field_release:piscan_pb.Entry.modulation)
  
  return modulation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_modulation(std::string* modulation) {
  if (modulation != nullptr) {
    
  } else {
    
  }
  modulation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modulation);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.Entry.modulation)
}

// string entryIndex = 5;
inline void Entry::clear_entryindex() {
  entryindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::entryindex() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.entryIndex)
  return entryindex_.GetNoArena();
}
inline void Entry::set_entryindex(const std::string& value) {
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.entryIndex)
}
inline void Entry::set_entryindex(std::string&& value) {
  
  entryindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.Entry.entryIndex)
}
inline void Entry::set_entryindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.Entry.entryIndex)
}
inline void Entry::set_entryindex(const char* value, size_t size) {
  
  entryindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.Entry.entryIndex)
}
inline std::string* Entry::mutable_entryindex() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.Entry.entryIndex)
  return entryindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_entryindex() {
  // @@protoc_insertion_point(field_release:piscan_pb.Entry.entryIndex)
  
  return entryindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_entryindex(std::string* entryindex) {
  if (entryindex != nullptr) {
    
  } else {
    
  }
  entryindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entryindex);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.Entry.entryIndex)
}

// .piscan_pb.Entry.Lockout lockoutType = 6;
inline void Entry::clear_lockouttype() {
  lockouttype_ = 0;
}
inline ::piscan_pb::Entry_Lockout Entry::lockouttype() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.lockoutType)
  return static_cast< ::piscan_pb::Entry_Lockout >(lockouttype_);
}
inline void Entry::set_lockouttype(::piscan_pb::Entry_Lockout value) {
  
  lockouttype_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.lockoutType)
}

// int32 lockoutDuration = 7;
inline void Entry::clear_lockoutduration() {
  lockoutduration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entry::lockoutduration() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.lockoutDuration)
  return lockoutduration_;
}
inline void Entry::set_lockoutduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lockoutduration_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.lockoutDuration)
}

// int32 delay = 8;
inline void Entry::clear_delay() {
  delay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entry::delay() const {
  // @@protoc_insertion_point(field_get:piscan_pb.Entry.delay)
  return delay_;
}
inline void Entry::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.Entry.delay)
}

// -------------------------------------------------------------------

// SignalLevel

// int32 level = 1;
inline void SignalLevel::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SignalLevel::level() const {
  // @@protoc_insertion_point(field_get:piscan_pb.SignalLevel.level)
  return level_;
}
inline void SignalLevel::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.SignalLevel.level)
}

// -------------------------------------------------------------------

// ScannerContext

// .piscan_pb.ScannerContext.State state = 1;
inline void ScannerContext::clear_state() {
  state_ = 0;
}
inline ::piscan_pb::ScannerContext_State ScannerContext::state() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerContext.state)
  return static_cast< ::piscan_pb::ScannerContext_State >(state_);
}
inline void ScannerContext::set_state(::piscan_pb::ScannerContext_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerContext.state)
}

// .piscan_pb.Entry entryData = 2;
inline bool ScannerContext::has_entrydata() const {
  return this != internal_default_instance() && entrydata_ != nullptr;
}
inline void ScannerContext::clear_entrydata() {
  if (GetArenaNoVirtual() == nullptr && entrydata_ != nullptr) {
    delete entrydata_;
  }
  entrydata_ = nullptr;
}
inline const ::piscan_pb::Entry& ScannerContext::entrydata() const {
  const ::piscan_pb::Entry* p = entrydata_;
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerContext.entryData)
  return p != nullptr ? *p : *reinterpret_cast<const ::piscan_pb::Entry*>(
      &::piscan_pb::_Entry_default_instance_);
}
inline ::piscan_pb::Entry* ScannerContext::release_entrydata() {
  // @@protoc_insertion_point(field_release:piscan_pb.ScannerContext.entryData)
  
  ::piscan_pb::Entry* temp = entrydata_;
  entrydata_ = nullptr;
  return temp;
}
inline ::piscan_pb::Entry* ScannerContext::mutable_entrydata() {
  
  if (entrydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::piscan_pb::Entry>(GetArenaNoVirtual());
    entrydata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:piscan_pb.ScannerContext.entryData)
  return entrydata_;
}
inline void ScannerContext::set_allocated_entrydata(::piscan_pb::Entry* entrydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entrydata_;
  }
  if (entrydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entrydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entrydata, submessage_arena);
    }
    
  } else {
    
  }
  entrydata_ = entrydata;
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.ScannerContext.entryData)
}

// bool manualHold = 3;
inline void ScannerContext::clear_manualhold() {
  manualhold_ = false;
}
inline bool ScannerContext::manualhold() const {
  // @@protoc_insertion_point(field_get:piscan_pb.ScannerContext.manualHold)
  return manualhold_;
}
inline void ScannerContext::set_manualhold(bool value) {
  
  manualhold_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.ScannerContext.manualHold)
}

// -------------------------------------------------------------------

// DemodContext

// int32 squelch = 1;
inline void DemodContext::clear_squelch() {
  squelch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodContext::squelch() const {
  // @@protoc_insertion_point(field_get:piscan_pb.DemodContext.squelch)
  return squelch_;
}
inline void DemodContext::set_squelch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  squelch_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.DemodContext.squelch)
}

// float gain = 2;
inline void DemodContext::clear_gain() {
  gain_ = 0;
}
inline float DemodContext::gain() const {
  // @@protoc_insertion_point(field_get:piscan_pb.DemodContext.gain)
  return gain_;
}
inline void DemodContext::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.DemodContext.gain)
}

// -------------------------------------------------------------------

// GeneralMessage

// .piscan_pb.GeneralMessage.Type type = 1;
inline void GeneralMessage::clear_type() {
  type_ = 0;
}
inline ::piscan_pb::GeneralMessage_Type GeneralMessage::type() const {
  // @@protoc_insertion_point(field_get:piscan_pb.GeneralMessage.type)
  return static_cast< ::piscan_pb::GeneralMessage_Type >(type_);
}
inline void GeneralMessage::set_type(::piscan_pb::GeneralMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.GeneralMessage.type)
}

// string content = 2;
inline void GeneralMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneralMessage::content() const {
  // @@protoc_insertion_point(field_get:piscan_pb.GeneralMessage.content)
  return content_.GetNoArena();
}
inline void GeneralMessage::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.GeneralMessage.content)
}
inline void GeneralMessage::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.GeneralMessage.content)
}
inline void GeneralMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.GeneralMessage.content)
}
inline void GeneralMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.GeneralMessage.content)
}
inline std::string* GeneralMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.GeneralMessage.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneralMessage::release_content() {
  // @@protoc_insertion_point(field_release:piscan_pb.GeneralMessage.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.GeneralMessage.content)
}

// -------------------------------------------------------------------

// SystemInfo

// string version = 1;
inline void SystemInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SystemInfo::version() const {
  // @@protoc_insertion_point(field_get:piscan_pb.SystemInfo.version)
  return version_.GetNoArena();
}
inline void SystemInfo::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.version)
}
inline void SystemInfo::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:piscan_pb.SystemInfo.version)
}
inline void SystemInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:piscan_pb.SystemInfo.version)
}
inline void SystemInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.SystemInfo.version)
}
inline std::string* SystemInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:piscan_pb.SystemInfo.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemInfo::release_version() {
  // @@protoc_insertion_point(field_release:piscan_pb.SystemInfo.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:piscan_pb.SystemInfo.version)
}

// int32 build = 2;
inline void SystemInfo::clear_build() {
  build_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::build() const {
  // @@protoc_insertion_point(field_get:piscan_pb.SystemInfo.build)
  return build_;
}
inline void SystemInfo::set_build(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  build_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.build)
}

// int32 squelchScaleMin = 3;
inline void SystemInfo::clear_squelchscalemin() {
  squelchscalemin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::squelchscalemin() const {
  // @@protoc_insertion_point(field_get:piscan_pb.SystemInfo.squelchScaleMin)
  return squelchscalemin_;
}
inline void SystemInfo::set_squelchscalemin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  squelchscalemin_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.squelchScaleMin)
}

// int32 squelchScaleMax = 4;
inline void SystemInfo::clear_squelchscalemax() {
  squelchscalemax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::squelchscalemax() const {
  // @@protoc_insertion_point(field_get:piscan_pb.SystemInfo.squelchScaleMax)
  return squelchscalemax_;
}
inline void SystemInfo::set_squelchscalemax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  squelchscalemax_ = value;
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.squelchScaleMax)
}

// repeated string supportedModulations = 5;
inline int SystemInfo::supportedmodulations_size() const {
  return supportedmodulations_.size();
}
inline void SystemInfo::clear_supportedmodulations() {
  supportedmodulations_.Clear();
}
inline const std::string& SystemInfo::supportedmodulations(int index) const {
  // @@protoc_insertion_point(field_get:piscan_pb.SystemInfo.supportedModulations)
  return supportedmodulations_.Get(index);
}
inline std::string* SystemInfo::mutable_supportedmodulations(int index) {
  // @@protoc_insertion_point(field_mutable:piscan_pb.SystemInfo.supportedModulations)
  return supportedmodulations_.Mutable(index);
}
inline void SystemInfo::set_supportedmodulations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.supportedModulations)
  supportedmodulations_.Mutable(index)->assign(value);
}
inline void SystemInfo::set_supportedmodulations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:piscan_pb.SystemInfo.supportedModulations)
  supportedmodulations_.Mutable(index)->assign(std::move(value));
}
inline void SystemInfo::set_supportedmodulations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supportedmodulations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:piscan_pb.SystemInfo.supportedModulations)
}
inline void SystemInfo::set_supportedmodulations(int index, const char* value, size_t size) {
  supportedmodulations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:piscan_pb.SystemInfo.supportedModulations)
}
inline std::string* SystemInfo::add_supportedmodulations() {
  // @@protoc_insertion_point(field_add_mutable:piscan_pb.SystemInfo.supportedModulations)
  return supportedmodulations_.Add();
}
inline void SystemInfo::add_supportedmodulations(const std::string& value) {
  supportedmodulations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:piscan_pb.SystemInfo.supportedModulations)
}
inline void SystemInfo::add_supportedmodulations(std::string&& value) {
  supportedmodulations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:piscan_pb.SystemInfo.supportedModulations)
}
inline void SystemInfo::add_supportedmodulations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supportedmodulations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:piscan_pb.SystemInfo.supportedModulations)
}
inline void SystemInfo::add_supportedmodulations(const char* value, size_t size) {
  supportedmodulations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:piscan_pb.SystemInfo.supportedModulations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SystemInfo::supportedmodulations() const {
  // @@protoc_insertion_point(field_list:piscan_pb.SystemInfo.supportedModulations)
  return supportedmodulations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SystemInfo::mutable_supportedmodulations() {
  // @@protoc_insertion_point(field_mutable_list:piscan_pb.SystemInfo.supportedModulations)
  return &supportedmodulations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace piscan_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::piscan_pb::Entry_Lockout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::Entry_Lockout>() {
  return ::piscan_pb::Entry_Lockout_descriptor();
}
template <> struct is_proto_enum< ::piscan_pb::ScannerContext_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::ScannerContext_State>() {
  return ::piscan_pb::ScannerContext_State_descriptor();
}
template <> struct is_proto_enum< ::piscan_pb::GeneralMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::piscan_pb::GeneralMessage_Type>() {
  return ::piscan_pb::GeneralMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_context_2eproto
